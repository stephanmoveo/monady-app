{"ast":null,"code":"/*! @name mpd-parser @version 0.19.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\nvar version = \"0.19.0\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: endRange - startRange + 1,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\n\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange = byterange.offset + byterange.length - 1;\n  return byterange.offset + \"-\" + endRange;\n};\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration,\n        periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === void 0 ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      periodDuration = attributes.periodDuration,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = 0;\n  } // This is used for mediaSequence\n\n\n  segment.number = 0;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\n\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic'; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex = sidxEnd + sidx.firstOffset;\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = startIndex + size - 1;\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      // this is used in parseByDuration\n      periodIndex: timeline,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n    startIndex += size;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first\n\n    if (acc[name]) {\n      var _acc$name$segments; // first segment of subsequent periods signal a discontinuity\n\n\n      if (playlist.segments[0]) {\n        playlist.segments[0].discontinuity = true;\n      }\n\n      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    } else {\n      // first Period\n      acc[name] = playlist;\n    }\n\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist$1(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\n\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist$1(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    var formatted = addSidxSegmentsToPlaylist$1(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist$1(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n\n    svc.forEach(function (service) {\n      var channel = service.channel,\n          language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\n\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\n\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists, locations, sidxMapping) {\n  var _mediaGroups;\n\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      type = _dashPlaylists$0$attr.type,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  var isAudioOnly = manifest.playlists.length === 0;\n\n  if (audioPlaylists.length) {\n    manifest.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly);\n  }\n\n  if (vttPlaylists.length) {\n    manifest.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  return manifest;\n};\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\n\n\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === void 0 ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n      periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = service.value.split(';');\n\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n            channel = _value$split2[0],\n            _value$split2$ = _value$split2[1],\n            opts = _value$split2$ === void 0 ? '' : _value$split2$;\n\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n              name = _opt$split[0],\n              val = _opt$split[1];\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n\n    var label = findChildren(adaptationSet, 'Label')[0];\n\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var parsedPeriodId = parseInt(period.attributes.id, 10); // fallback to mapping index if Period@id is not a number\n\n    var periodIndex = window.isNaN(parsedPeriodId) ? index : parsedPeriodId;\n    var periodAttributes = merge(mpdAttributes, {\n      periodIndex: periodIndex,\n      periodStart: period.attributes.start\n    });\n\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n      priorPeriodAttributes = _ref.priorPeriodAttributes,\n      mpdType = _ref.mpdType; // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8(playlists, parsedManifestInfo.locations, options.sidxMapping);\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"sources":["/Users/stephanbenchemoul/Documents/Projects/Moveo Skills Projects/monady-app/quickstart-react/node_modules/mpd-parser/dist/mpd-parser.es.js"],"names":["resolveUrl","window","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","_len","arguments","length","objects","Array","_key","reduce","result","source","Object","keys","forEach","key","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","findIndexes","l","a","e","errors","INVALID_NUMBER_OF_PERIOD","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","_ref","_ref$baseUrl","baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","parseInt","endRange","byterange","offset","byteRangeToString","parseEndNumber","endNumber","isNaN","segmentRange","static","_static","attributes","duration","_attributes$timescale","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","_attributes$timescale2","_attributes$start","_attributes$minimumUp","minimumUpdatePeriod","_attributes$timeShift","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","segmentCount","Math","ceil","availableStart","floor","availableEnd","max","min","toSegments","number","index","_attributes$timescale3","periodIndex","_attributes$startNumb","startNumber","timeline","time","parseByDuration","type","_attributes$timescale4","_segmentRange$type","segments","sectionDuration","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","Error","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","endList","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","generateSidxKey","mergeDiscontiguousPlaylists","playlists","mergedPlaylists","acc","name","id","lang","_acc$name$segments","discontinuity","apply","contentProtection","discontinuityStarts","addSidxSegmentsToPlaylist$1","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","formatAudioPlaylist","isAudioOnly","_attributes","NAME","BANDWIDTH","bandwidth","CODECS","codecs","targetDuration","mediaSequence","AUDIO","SUBTITLES","formatVttPlaylist","_ref2","_m3u8Attributes","m3u8Attributes","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","label","roleLabel","autoselect","default","formatted","firstLabel","organizeVttPlaylists","organizeCaptionServices","captionServices","svcObj","svc","service","channel","instreamId","hasOwnProperty","aspectRatio","easyReader","formatVideoPlaylist","_ref3","_attributes2","RESOLUTION","width","height","videoOnly","_ref4","mimeType","contentType","audioOnly","_ref5","vttOnly","_ref6","toM3u8","dashPlaylists","locations","_mediaGroups","_dashPlaylists$0$attr","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captions","Boolean","manifest","allowCache","mediaGroups","VIDEO","audio","subs","cc","getLiveRValue","parseByTimeline","segmentTimeline","_attributes$minimumUp2","_attributes$media","media","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Number","Time","presentationTimeOffset","presentationTime","periodStart","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","representations","findChildren","element","childNodes","tagName","getContent","textContent","trim","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","_match$slice","slice","year","month","day","hour","minute","second","parseFloat","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","DEFAULT","parseAttributes","el","parseFn","keySystemsMap","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","parseCaptionServiceMetadata","_value$split","_values","flags","undefined","_value$split2","_value$split2$","opts","opt","_opt$split","val","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","accessibility","labelVal","nodeValue","toAdaptationSets","mpdAttributes","mpdBaseUrls","period","parsedPeriodId","adaptationSets","getPeriodStart","priorPeriodAttributes","mpdType","inheritAttributes","mpd","options","_options","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periodNodes","periods","priorPeriod","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"mappings":"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","sourcesContent":["/*! @name mpd-parser @version 0.19.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\n\nvar version = \"0.19.0\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: endRange - startRange + 1,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange = byterange.offset + byterange.length - 1;\n  return byterange.offset + \"-\" + endRange;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration,\n        periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === void 0 ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      periodDuration = attributes.periodDuration,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = 0;\n  } // This is used for mediaSequence\n\n\n  segment.number = 0;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic'; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex = sidxEnd + sidx.firstOffset;\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = startIndex + size - 1;\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      // this is used in parseByDuration\n      periodIndex: timeline,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n    startIndex += size;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first\n\n    if (acc[name]) {\n      var _acc$name$segments;\n\n      // first segment of subsequent periods signal a discontinuity\n      if (playlist.segments[0]) {\n        playlist.segments[0].discontinuity = true;\n      }\n\n      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    } else {\n      // first Period\n      acc[name] = playlist;\n    }\n\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist$1(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist$1(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    var formatted = addSidxSegmentsToPlaylist$1(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist$1(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n\n    svc.forEach(function (service) {\n      var channel = service.channel,\n          language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\n\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\n\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists, locations, sidxMapping) {\n  var _mediaGroups;\n\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      type = _dashPlaylists$0$attr.type,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  var isAudioOnly = manifest.playlists.length === 0;\n\n  if (audioPlaylists.length) {\n    manifest.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly);\n  }\n\n  if (vttPlaylists.length) {\n    manifest.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === void 0 ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n      periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = service.value.split(';');\n\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n            channel = _value$split2[0],\n            _value$split2$ = _value$split2[1],\n            opts = _value$split2$ === void 0 ? '' : _value$split2$;\n\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n              name = _opt$split[0],\n              val = _opt$split[1];\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n\n    var label = findChildren(adaptationSet, 'Label')[0];\n\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var parsedPeriodId = parseInt(period.attributes.id, 10); // fallback to mapping index if Period@id is not a number\n\n    var periodIndex = window.isNaN(parsedPeriodId) ? index : parsedPeriodId;\n    var periodAttributes = merge(mpdAttributes, {\n      periodIndex: periodIndex,\n      periodStart: period.attributes.start\n    });\n\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n      priorPeriodAttributes = _ref.priorPeriodAttributes,\n      mpdType = _ref.mpdType;\n\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8(playlists, parsedManifestInfo.locations, options.sidxMapping);\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\n"]},"metadata":{},"sourceType":"module"}